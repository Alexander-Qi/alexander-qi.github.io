<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用LaTeX制作幻灯片]]></title>
    <url>%2F2019%2F08%2F06%2Fbeamer%2F</url>
    <content type="text"><![CDATA[说到制作幻灯片，大家首先想到的当然是Microsoft PowerPoint，或是预装于所有Mac OS中的KeyNote，也许还有Prezi等较为年轻的工具。但是事实上，LaTeX也可以用于制作幻灯片哦！ LaTeX制作的幻灯片，说到底还是.pdf格式的，而且生成方式也是通过TeX排版引擎编译而成。故而有几个比较大的硬伤： 没有华丽的动画 艺术字等衍生功能缺失 没有图片繁多的模板套用 但是相对的，也有一些独到的优点： 公式编号非常方便 幻灯片文件在所有系统所有环境下都可以查看 更换模板只需要修改一条命令 一条命令就可以生成相应的讲义 当然啦，也有着完全不需要图形界面就能完成幻灯片编辑的优点。 开始主流的使用LaTeX制作幻灯片的工具是被称为beamer的宏包。在TeX Live中已经预置好了。如果你的发行版没有这个宏包，你可以在 https://ctan.org/pkg/beamer 获取到这个宏包的源码并自行安装。为了使beamer正常工作，或者说达到最佳的输出效果，最好同时使用以下宏包：at­begshi, etool­box, hy­per­ref, if­pdf, multimedia, pgf, 和 trans­la­tor。 我们首先在导言区中输入以下代码以使用beamer宏包： 1\usepackage&#123;beamer&#125; 当然，如果你的文档内容包含中文而且不满足于仅仅加载ctex宏包带来的汉化效果，你也可以直接使用ctexbeamer这个中文文档类。 1\usepackage&#123;ctexbeamer&#125; 在导言区输入完那些常规的信息（加载你需要的宏包，设置作者标题日期等）之后，我们就可以进入正文区啦！ 正文排版幻灯片嘛，肯定是由一张张幻灯片组成的（这不是废话嘛喂），在beamer中，frame环境就代表了一张幻灯片。 让我们来看看幻灯片标题页的写法吧！ 123\begin&#123;frame&#125; \titlepage\end&#123;frame&#125; 需要注意的是我们不再使用常规的\maketitle命令而是稍少见的\titlepage命令来生成标题页。 同样，每一页的幻灯片总是需要一个标题的吧？以及要是需要生成目录该怎么办？ 1234\begin&#123;frame&#125; \frametitle&#123;Catalogue&#125; \tableofcontents\end&#123;frame&#125; 你会发现常规的\tableofcontents仍然是可以用的。需要注意的是，此处的目录，仍然是根据你的\section{·}以及\subsection{·}来生成的。但是这些命令必须写在frame环境的外面！ 在frame中，你仍旧可以使用之前就已经熟悉的环境来输入文字，比如itemize、enumerate等；也可以照常插入表格和图片。不过由于幻灯片不同寻常的比例，记得调整表格和图片的输出效果哦！ 同时，你也可以使用类似block这种带标题的“文本框”来达到比较好的展示效果，比如： 123456789\begin&#123;frame&#125; \frametitle&#123;Just Another Heading&#125; \begin&#123;block&#125;&#123;Your Paragraph Title&#125; Input whatever you want! \end&#123;block&#125; \begin&#123;itemize&#125; \item An Example. \end&#123;itemize&#125;\end&#123;frame&#125; 你也可以在beamer中使用verbatim环境来方便地进行代码教学！ 1234567891011[X, Y] = meshgrid(0.01:0.01:1, 0.01:0.01:1); Zfun =@(x,y)12.5*x.*log10(x).*y.*(y-1)+exp(-((25 ... *x - 25/exp(1)).^2+(25*y-25/2).^2).^3)./25; Z = Zfun(X,Y); figure; surf(Y,Z,X,&apos;FaceColor&apos;,[1 0.75 0.65],&apos;linestyle&apos;,&apos;none&apos;); hold on surf(Y+0.98,Z,X,&apos;FaceColor&apos;,[1 0.75 0.65],&apos;linestyle&apos;,&apos;none&apos;); axis equal; view([116 30]); camlight; 你也自然可以使用BibTeX来进行引用！ 样式调整相比较于Microsoft PowerPoint，beamer虽然没有那么多第三方的模板和主题，但仍然有许多快速美化幻灯片的方法。 更换主题beamer拥有超过200种主题供你选择。你也可以自定义你自己的主题。 我们可以在导言区更改beamer的主题。 1\usetheme&#123;Berlin&#125; 你也可以单独自定义颜色的主题： 1\usecolortheme&#123;whale&#125; 如果你对标题和功能键的布局不甚满意，也可以通过再次更改outer theme来达到自定义幻灯片的效果： 1\useoutertheme&#123;sidebar&#125; 具体可见：https://hartwork.org/beamer-theme-matrix/ 字体和颜色假如你想更换标题的字体和颜色，那该怎么办呢？在beamer中提供两个非常简单的命令让你自定义标题的输出效果： 12\setbeamerfont&#123;title&#125;&#123;shape=\itshape,family=\rmfamily&#125;\setbeamercolor&#123;title&#125;&#123;fg=red!80!black,bg=red!20!white&#125; 讲义制作在LaTeX中你只需要在导言区加入这几句命令就可以将你的幻灯片转换成讲义： 123\usepackage&#123;pgfpages&#125;\pgfpagesuselayout&#123;resize to&#125;[a4paper,border shrink=5mm,landscape]\mode&lt;handout&gt;&#123;\setbeamercolor&#123;background canvas&#125;&#123;bg=black!5&#125;&#125;]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX中长文档的处理]]></title>
    <url>%2F2019%2F08%2F05%2Flargedocs%2F</url>
    <content type="text"><![CDATA[当你需要排版一个非常大的文档，或者涉及到多人协同的时候，我们就希望能将一个庞大的.tex文件分成很多部分以方便我们的管理。那么该如何做到这一点呢？ 最简单的分开输出的方式我们可以使用\input{filename.tex}这个命令来将另外一个.tex文档中的内容插入到一个.tex文件中。 首先我们来创建一系列.tex文档。新建一个.tex文件，输入且仅输入以下的内容： 1234567891011121314\usepackage&#123;chemfig&#125;\usepackage&#123;ctex&#125;\usepackage&#123;amsmath&#125;\usepackage&#123;array&#125;\usepackage&#123;booktabs&#125;\usepackage&#123;hypdoc&#125;\usepackage&#123;listings&#125;\usepackage&#123;lmodern&#125;\usepackage&#123;mathpazo&#125;\usepackage&#123;microtype&#125;\usepackage&#123;graphicx&#125;\usepackage&#123;makeidx&#125;\author&#123;Your Name&#125;\title&#123;Developing Large Documents&#125; 随后保存为preamble.tex（具体文件名随意，但绝对不能包含中文）。 接着再新建一个.tex文件，输入且仅输入以下的内容： 1234567\chapter&#123;文本&#125; 这一章包含了关于基础文字输入的内容。\section&#123;一个标题&#125; 首先是段落： \paragraph&#123;段落标题&#125;这是段落的内容。 图表表格也都可以照常使用！ 保存为chpt1.tex。 随后再新建一个.tex文件，输入且仅输入以下的内容： 1234\chapter&#123;结构式&#125; 这一章就随便画画结构式好了。\section&#123;chemfig&#125; \chemfig&#123;A-B-[1]C-[3]-D-[7]E-[6]F&#125; 保存为chpt2.tex 最后，新建.tex文件，输入且仅输入以下的内容： 12345678\documentclass[twocolumn,openany]&#123;ctexbook&#125;\input&#123;preamble&#125;\begin&#123;document&#125; \maketitle \tableofcontents \input&#123;chpt1&#125; \input&#123;chpt2&#125;\end&#123;document&#125; 保存为main.tex。并将之前的所有文件都放在同一目录下，随后对main.tex进行编译即可。 处理更复杂的文档之前所涉及到的内容还没有满足以下需求： 插入更长的内容的时候效果不佳 工作文件夹很乱 需要封面和附录 接下来我将简单地介绍一下解决这些问题的方法。 插入更长的内容刚刚提到的\input命令其实比较适合插入结构简单或者内容较少的.tex文档，面对较长而且排版复杂的.tex文档就稍显力不从心。 这个时候我们可以用\include命令来代替\input。相较于\input，\include有以下特点： 可以用相对路径引用外部文件 默认换页，不会破坏原来的排版 不能嵌套 整理工作文件夹你可以在你的工作文件夹里新建几个文件夹，分别叫bin，fig，ref。 在data文件夹中你可以存放你的所有的内容相关的.tex文件，在main.tex中引用的时候你需要这样用： 12\input&#123;bin/preamble&#125;\include&#123;bin/chpt1&#125; 随后你需要在导言区中加上这样的命令： 1\graphicspath&#123;&#123;fig/&#125;&#125; 这样你在使用\includegraphics命令的时候就可以照旧直接输入文件名了。 接着，在参考文献处，你可以这样使用ref文件夹里的refs.bib文件： 1\bibliography&#123;ref/refs&#125; 这样，你就可以获得一个干净漂亮的工作文件夹了！ 序言和附录在排版书籍的过程中，常常遇到这样一种需求：需要用罗马数字标记序言、目录等内容；在书籍的最后需要加上后记等内容。而这些内容都不算正文，你不希望让LaTeX给予这些章节序号。 在这个时候，我们就可以利用\frontmatter和\backmatter。具体而言，前言部分是\frontmatter，正文是\mainmatter而后记等内容是\backmatter。下面是一个例子： 12345678910111213141516\documentclass[twocolumn,openany]&#123;ctexbook&#125;\input&#123;preamble&#125;\begin&#123;document&#125; \frontmatter \maketitle \chapter&#123;前言&#125; 此书献给伟大的思想家马克思。 \tableofcontents \mainmatter \input&#123;chpt1&#125; \input&#123;chpt2&#125; \backmatter \chapter&#123;后记&#125; 自强不息，厚德载物。 \bibliography&#123;ref/refs&#125;\end&#123;document&#125; 仔细观察编译出的文件，你会发现以下几点： \frontmatter中页码是小写罗马数字，章节会出现在目录里但是没有序号。 \mainmatter中页码是阿拉伯数字，章节有编号 \backmatter中页码是阿拉伯数字，章节会出现在目录里但是没有序号。]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX中遇到问题如何求助]]></title>
    <url>%2F2019%2F08%2F04%2Flatextroubleshooting%2F</url>
    <content type="text"><![CDATA[有些时候，你会不幸地在编译自己的.tex文件的时候遇到报错。没有任何一本书或者教程能够覆盖你所需要用到的所有宏包和命令，更不可能了解到你的.tex文件里有着什么样的环境。因此如何自己寻找到解决问题的方法在你入门了LaTeX之后是及其重要的。 预防方法预防问题才是杜绝报错的第一选择。我们该如何预防问题呢？首先我们需要掌握自己需要的命令的正确用法。 看官方文档很多时候我们会百度自己的需求，然后照搬网上的解决方案，但这样很多时候是不合适的。我个人建议的做法是去Comprehensive TeX Archive Network上寻找网上查到的宏包的官方文档，随后模仿官方文档中的例子去解决自己的需求。 CTAN的官网在这里：https://ctan.org/ 这样做的原因非常简单，中文互联网社区中给出的解决方案很多都已经很老了，其中运用的命令不一定在宏包的新版本中仍旧实用；同时竟然还有人用CJK来解决中文输入的问题，这实在是害人不浅。 用模板另外一种预防办法是从别人给出的模板开始写作，例如overleaf上的许多模板。overleaf是一个非常优秀的在线LaTeX协同编辑网站，有了它，你可以不在电脑上装TeX Live；也可以和很多人一同编辑一个项目。 其他的模板包括国内外大学的学位论文模板和期刊投稿用模板等，都是非常好的学习资料。 找解决方案最佳的LaTeX问答社区是stackexchange的TeX板块，面对英文文档排版中可能遇到的各种问题，你都能在这里找到你想要的答案，并且答案的质量远远高于国内社区。 它的网址是：https://tex.stackexchange.com 自然，在问答社区寻找答案比起使用搜索引擎还是不方便了一些。有条件的小伙伴可以用一个不存在的搜索引擎来搜索和LaTeX相关的问题，经亲测效果还是非常可喜的。]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX中自定义命令]]></title>
    <url>%2F2019%2F08%2F03%2Fnewcommand%2F</url>
    <content type="text"><![CDATA[本文的主要内容是关于如何自定义一个自己的命令的。 在编写LaTeX文档的过程中，有时你会需要经常输入一个不太常见的专有名词，或者需要频繁实现一个比较特殊的效果。这个时候我们可以在一个LaTeX文档中自定义自己的命令！ 最简单的自定义命令如果你只是需要输入一段特定样式的特定文字，你可以在导言区这么做： 1\newcommand&#123;\MyC&#125;&#123;\textit&#123;Customize your own command!&#125;&#125; 通过\newcommand{·}{·}命令，我们成功地自定义了一个名叫\MyC的新命令。当你在正文区输入这个命令的时候，你就相当于在这个位置输入了\textit{Customize your own command!}。让我们来看看一个实例： 12345\documentclass&#123;ctexart&#125;\newcommand&#123;\MyC&#125;&#123;\textit&#123;Customize your own command!&#125;&#125;\begin&#123;document&#125; 来看看新的命令&#123;\MyC&#125;吧！\end&#123;document&#125; 复杂一些的自定义命令当然，如果自定义命令只能做到这种程度那也太鸡肋了。我们可以通过添加参数来让我们的新命令可以接受信息。 1\newcommand&#123;\twoword&#125;[2]&#123;\textsc&#123;#1&#125;, \textit&#123;#2&#125;&#125; 其中，被中括号包裹的数字是新命令能接受的参数数量，范围1-9；最后的花括号内的#1和#2分别是输入的第一个参数和第二个参数。 来看看实例吧： 12345678\documentclass&#123;ctexart&#125;\newcommand&#123;\MyC&#125;&#123;\textit&#123;Customize your own command!&#125;&#125;\newcommand&#123;\twoword&#125;[2]&#123;\Large&#123;\textsc&#123;#1&#125;&#125;, \small&#123;\textit&#123;#2&#125;&#125;&#125;\begin&#123;document&#125; 来看看新的命令&#123;\MyC&#125;吧！ 再来看看这个命令：\twoword&#123;Large&#125;&#123;small&#125;。\end&#123;document&#125; 更复杂的自定义命令我们也可以给我们的新命令加上被方括号包裹的参数来进一步调控输出，增强新命令的适用范围。 1\newcommand&#123;\adv&#125;[1][\bfseries]&#123;&#123;#1&#125;&#125; 大家可以发现，在中间多了一个方括号，这个方括号内就是我们的新命令的默认参数，我们可以通过手动更改来达到不同的排版效果： 123456789101112\documentclass&#123;ctexart&#125;\newcommand&#123;\MyC&#125;&#123;\textit&#123;Customize your own command!&#125;&#125;\newcommand&#123;\twoword&#125;[2]&#123;\Large&#123;\textsc&#123;#1&#125;&#125;, \small&#123;\textit&#123;#2&#125;&#125;&#125;\newcommand&#123;\adv&#125;[2][\bfseries]&#123;&#123;#1#2&#125;&#125;\begin&#123;document&#125; 来看看新的命令&#123;\MyC&#125;吧！ 再来看看这个命令：\twoword&#123;Large&#125;&#123;small&#125;。 新命令的默认情况是这样的\adv&#123;加粗&#125;， 但是也可以加参数来变成\adv[\itshape]&#123;这样&#125;。\end&#123;document&#125; 必须注意这样使用时方括号内的参数也计算入总参数数量。]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX中三分钟搞定引用]]></title>
    <url>%2F2019%2F07%2F22%2Flatex-skills2%2F</url>
    <content type="text"><![CDATA[一句代码也不写也能在LaTeX里搞定引用吗？ 答案是肯定的。 本期推送就将教会大家如何用最简单最图形界面的方法在LaTeX里解决引用的问题。 为了做到这一点，我们需要在你的计算机上安装如下工具： 操作系统 文献管理工具 TeX发行版 TeX编辑器 本文中我使用的例子基于以下工具的组合：Windows 10+EndNote X9+TeX Live 2018+TeXstudio。其中Windows 10和EndNote X9都是收费软件（THU为师生准备了这两款软件的批量授权版，大家可以在its上获取）。也有完全免费的组合，比如Debian 10+Mendeley+TeX Live 2019+TeXstudio。 让我们从引用的源头讲起吧。 查找文献一般来说大家比较常用的文献检索网站有知网，Web of Science等等。这些网站都支持导出参考文献。 我们先以知网为例，我们找到自己想要的文献后单击文献标题右下方的“导出/参考文献”，随后在弹出的页面左侧选择“EndNote”并单击蓝色的导出按钮，就能得到包含着文献信息的一个.txt文档。 我们再以Web of Science为例，在找到我们需要的文献之后，单击“导出”并选择你使用的文献管理工具，就能得到包含着文献信息的.ciw文档。 当然，能找到文献的地方还有很多，比如各大出版商的网站等等，在那些网站上一般也可以找到类似于导出引文的选项，在此不再赘述。 管理你的文献下载好文献信息后，我们就需要将信息导入你的文献管理软件。下面的教程基于EndNote X9。 首先新建一个.enl文件，这个文件是你的一个“文献图书馆”，用于管理与你的某篇文章相关的所有文献。随后单击“Import”从外部导入我们刚刚从知网得到的.txt文件。 需要注意的是，知网这样输出的文件并不能被EndNote正确识别，比如关于期刊名称的信息会像这样附在文献标题这一栏，这时候我们需要手动调整。 当然也有更简单的方式，比如你可以直接双击.ciw文件来将文献信息导入你的EndNote。 导出.bib文件前面的步骤都完成后，选中.enl文件中的所有文献，并点击”Export”。随后在弹出的窗口中将”Output Style”更改为”BibTeX Export”，就可以得到一个包含着BibTeX能理解的文献信息的.txt文档。将这个文档的后缀名改为.bib后，这就是我们需要的.bib文件啦！ 将这个文件放到与你的.tex文件同一目录下。随后确保你的.tex文件形似下面这样： 1234567\documentclass&#123;ctexart&#125; % 文档类型可根据自己需求选择\usepackage&#123;natbib&#125; % 这个是必需的\bibliographystyle&#123;apalike&#125; % 这条命令控制了引用的样式，可以根据需求自己更改\begin&#123;document&#125; 清华化学系的本科生既发表过中文论文\citep&#123;RN1&#125;，也发表过英文论文\citep&#123;RN2&#125;。 \bibliography&#123;latexshowcase&#125; % 花括号内是bib文件的文件名\end&#123;document&#125; 这是上面内容的输出： 如果大家觉得关于引用还有一些疑问，可以看这篇文章。这篇文章里包含了在LaTeX中引用的大部分基础知识。 也欢迎大家关注我并阅读我以前发布的一些文章！]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[在LaTeX里处理引用]]></title>
    <url>%2F2019%2F07%2F19%2Flatex-cite%2F</url>
    <content type="text"><![CDATA[本文的主要内容： 最基础的引用方式 如何使用BibTeX 如何方便地使用BibTeX 论文写作的过程中免不了引用文献。在Microsoft Word下我们可以通过像EndNote一样的工具来完成方便快捷地引用（但这两个工具都是收费的），那么在免费开源的LaTeX中，我们该如何实现引用呢？ 最基础的引用方法在LaTeX中，最为原始而基础的引用方式需要在.tex文件最后输入一个thebibliography环境，将我们要引用的文献信息硬编码在.tex文件中。 下面是一个例子： 123456789\documentclass&#123;ctexart&#125;\begin&#123;document&#125;\section&#123;最为基础的引用方法&#125;在这种环境下，你既可以引用英文的文献\cite&#123;moss&#125;，也可以引用中文的文献\cite&#123;505&#125;。相信你已经发现了，在\verb|\bibitem[·]&#123;citekey&#125;|前面的中括号里加东西可以改变文章中引用括号里的内容。\begin&#123;thebibliography&#125;&#123;widest label&#125;\bibitem&#123;moss&#125; G.P. Moss, \emph&#123;Extension and revision of the nomenclature for spiro compounds&#125;, 1999\bibitem[Wu, 2008]&#123;505&#125; 吴哲明, \emph&#123;我国制药企业创新药物研发战略研究&#125;, 2008\end&#123;thebibliography&#125;\end&#123;document&#125; 这是上面那个例子的输出： 这种方式如果不自定义标签，引用的形式就都是嵌在正文里，被方括号包裹的数字。这样明显达不到“方便”的程度。还好我们现在已经拥有了更加简便的工具。 BibTeX的基础用法BibTeX是一个和LaTeX联用的管理文献和引用样式的工具。这时候我们会接触到一个新的文件格式，.bib格式。 如何新建一个.bib文件呢？非常简单。首先，打开记事本（Windows下的话，其他系统打开任意文本编辑器即可），随后输入以下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950@article&#123;patterson1917system, title=&#123;A SYSTEM OF ORGANIC NOMENCLATURE.&#125;, author=&#123;Patterson, Austin M and Curran, Carleton E&#125;, journal=&#123;Journal of the American Chemical Society&#125;, volume=&#123;39&#125;, number=&#123;8&#125;, pages=&#123;1623--1638&#125;, year=&#123;1917&#125;, publisher=&#123;ACS Publications&#125;&#125;@article&#123;radulescu1911nomenklatur, title=&#123;&#123;\&quot;U&#125;ber die Nomenklatur der Spirane&#125;, author=&#123;Radulescu, Dan&#125;, journal=&#123;Berichte der deutschen chemischen Gesellschaft&#125;, volume=&#123;44&#125;, number=&#123;1&#125;, pages=&#123;1023--1026&#125;, year=&#123;1911&#125;, publisher=&#123;Wiley Online Library&#125;&#125;@article&#123;rigaudy1979nomenclature, title=&#123;Nomenclature of organic chemistry: sections A, B, C, D, E, F and H-1979 ed.&#125;, author=&#123;Rigaudy, J and Klesney, SP and others&#125;, year=&#123;1979&#125;, publisher=&#123;Oxford (UK) Pergamon Press&#125;&#125;@article&#123;畑一夫1979多環化合物の, title=&#123;多環化合物の IUPAC 命名法&#125;, author=&#123;畑一夫&#125;, journal=&#123;有機合成化学協会誌&#125;, volume=&#123;37&#125;, number=&#123;2&#125;, pages=&#123;148--160&#125;, year=&#123;1979&#125;, publisher=&#123;The Society of Synthetic Organic Chemistry, Japan&#125;&#125;@article&#123;powell1984treatment, title=&#123;Treatment of variable valence in organic nomenclature (lambda convention)(Recommendations 1983)&#125;, author=&#123;Powell, WH&#125;, journal=&#123;Pure and applied chemistry&#125;, volume=&#123;56&#125;, number=&#123;6&#125;, pages=&#123;769--778&#125;, year=&#123;1984&#125;, publisher=&#123;De Gruyter&#125;&#125; 单击“保存”，随后将文件名字改为ref.bib即可（前面的文件名可以随便取）。 我们刚刚干了什么呢？我们刚刚已将一堆文献的信息用一定的格式手动地集体存储至一个独立于.tex文件的文本文档里。 每一段花括号内最开头的一段文字，如rigaudy1979nomenclature就是我们刚刚接触过的“citekey”，在正文内我们只需要使用形似\cite{powell1984treatment}的代码就可以引用啦！ 而每一个文件中需要输入的内容大致有这些： 关键词 描述 address Usually the address of the publisher. At least for small publishers, this information might be useful. annote An annotation, not used by the standard bibliography styles. Other styles or macros might use this. author The name(s) of the author(s). booktitle The title of a book, if you cite a part of that. For a book, use the title field instead. chapter A chapter number. crossref The key of the database entry being cross referenced. edition The edition (First, Second, and alike) of a book. Commonly it’s capitalized. editor The name(s) of the editor(s). howpublished The way of publishing, especially if it’s unusual. Capitalize the first word. institution Could be a sponsoring institution. journal A journal name; you may use common abbreviations. key Used for alphabetizing, cross-referencing, and labeling if the author information is missing. Don’t confuse it with the key used in the \cite command which corresponds to the beginning of the entry. month The month in which the work was published or written if it’s not yet published. Usually a three letter abbreviation is used. note Any additional useful information. Capitalize the first word. number The number of a journal or another kind of work in a series. organization Might be a sponsoring organization. pages A page number or range of page numbers, like 12-18 or 22+. publisher The name of the publisher. school Could be the name of the school where the document was written. series The name of a series of books or its number of a multi-volume set. title The title of the work. type The type of the publication. volume The volume of a journal or multi-volume book. year The year of the publication or the year when it was written if it hasn’t been published yet. Commonly four numerals are used, such as 2010. 但是你会发现，很多时候你根本不需要怎么多信息啊！一般来说BibTeX所需的信息和文献的类型有关，就是每一个开头@后面的那个单词。 BibTeX里的文档类型有: 文档类型 需要的关键词 可选的关键词 article author, title, journal, year volume, number, pages, month, note book author or editor, title, publisher, year volume or number, series, address, edition, month, note booklet title author, howpublished, address, month, year, note conference author, title, booktitle, year editor, volume or number, series, pages, address, month, organization, publisher, note manual title author, organization, address, edition, month, year, note mastersthesis author, title, school, year type, address, month, note misc none author, title, howpublished, month, year, note phdthesis author, title, school, year type, address, month, note proceedings title, year editor, volume or number, series, address, month, organization, publisher, note techreport author, title, institution, year type, number, address, month, note unpublished author, title, note month, year 下面是一个例子（需要将刚刚生成的ref.bib和下面这个.tex文件放在同一目录下）： 1234567891011121314\documentclass&#123;ctexart&#125;\begin&#123;document&#125; \section&#123;BibTeX实例&#125; 哇有好多文献要引用啊。 那只能随便写写啦~ 第一个文献是这个\cite&#123;patterson1917system&#125;。 然后是这个\cite&#123;radulescu1911nomenklatur&#125;。 你\cite&#123;rigaudy1979nomenclature&#125;可能会好奇： 什么样式适合你\cite&#123;畑一夫1979多環化合物の&#125;？ 别急，后面就会讲到\cite&#123;powell1984treatment&#125;。 （本文是不严谨的错误示范，真正写论文的时候千万别这样） \bibliographystyle&#123;authordate3&#125; \bibliography&#123;ref&#125;\end&#123;document&#125; 如果你没有使用TeXstudio这样的工具，而是手动编译.tex文件的话，你需要先运行一遍XeLaTeX，再运行一遍BibTeX，再运行两边XeLaTeX。 我们可以通过改变\bibliographystyle{·}中花括号内的内容来改变引用文献的样式。大家可以到这个网站寻找自己需要的样式：http://www.cs.stir.ac.uk/~kjt/software/latex/showbst.html 使用natbibnatbib让我们引用的样式更多并且更加方便了。我们首先需要在导言区加载natbib宏包。随后同样在导言区输入\bibliographystyle{apalike}（只是个例子，花括号内的内容可以改），最后在正文的最后，输入\bibliography{·}就能引用啦！ 使用natbib可以明显提升BibTeX的鲁棒性，对于非英语文献的支持性更好，一般来说是非常推荐使用natbib的。]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX中三线表、并置图片、固定表格]]></title>
    <url>%2F2019%2F07%2F15%2Flatexskills-1%2F</url>
    <content type="text"><![CDATA[本文开始先和大家闲聊几句。之前的《从零开始的LaTeX教程》系列承蒙大家的照顾，阅读量还是很多的呢！甚至收到了不少打赏，开心！之后的文章我还是会采用GitHub Markdown的风格来排版，毕竟还算是有一点代码教学的嘛。 从这篇文章开始的《LaTeX使用技巧》系列会教大家应对一些在论文写作过程中比较常见的需求，让大家的LaTeX之旅更加顺利~ 本文的主要内容： 如何绘制论文需要的三线表 如何并置多张图片 如何不让图片和表格“乱跑” 画三线表三线表是大家在写实验报告和论文的时候非常常见的表格样式。三线表通常只有三条线，即顶线、底线和栏目线，这三条线都是横线，表格中没有任何竖线。其中顶线和底线为粗线，栏目线为细线。 在LaTeX中实现三线表的效果非常简单。我们首先需要进入tabular环境，随后在对应的位置加入相应的横线：顶线是\toprule，栏目线是\midrule，底线是\bottomrule。下面是一个例子： 1234567891011121314151617\begin&#123;tabular&#125;&#123;ccccc&#125; \toprule Year &amp; NME &amp; New BLA &amp; Total&amp; Rate/\% \\ \midrule 2008 &amp; 21 &amp; 3 &amp; 95 &amp; 25.3 \\ 2009 &amp; 20 &amp; 6 &amp; 98 &amp; 26.5 \\ 2010 &amp; 15 &amp; 6 &amp; 93 &amp; 22.6 \\ 2011 &amp; 24 &amp; 6 &amp; 100 &amp; 30 \\ 2012 &amp; 33 &amp; 6 &amp; 101 &amp; 38.6 \\ 2013 &amp; 25 &amp; 4 &amp; 102 &amp; 28.4 \\ 2014 &amp; 30 &amp; 11 &amp; 119 &amp; 34.4 \\ 2015 &amp; 33 &amp; 12 &amp; 127 &amp; 35.4 \\ 2016 &amp; 15 &amp; 7 &amp; 102 &amp; 21.6 \\ 2017 &amp; 34 &amp; 12 &amp; 150 &amp; 30.7 \\ 2018 &amp; 42 &amp; 17 &amp; 151 &amp; 39.1 \\ \bottomrule\end&#123;tabular&#125; 下面是这个例子的输出效果： 当然，一张完整的表格是需要标题和注释的。这一点需要在table环境中实现。我们可以用\caption{·}命令来为表格添加标题，以及用\label{·}命令添加标签以方便交叉引用。 但是为表格添加脚注是一件LaTeX经典难题。在脚注不太多的情况下我们可以手动在表格下面硬编码一条脚注。下面是一个例子： 123456789101112131415161718192021222324\begin&#123;table&#125;[htbp] \centering \caption&#123;2008-2018年FDA审核通过的NME,BLA,NDA及创新药比例&#125; \begin&#123;tabular&#125;&#123;ccccc&#125; \toprule Year &amp; NME &amp; New BLA &amp; Total*&amp; Rate/\% \\ \midrule 2008 &amp; 21 &amp; 3 &amp; 95 &amp; 25.3 \\ 2009 &amp; 20 &amp; 6 &amp; 98 &amp; 26.5 \\ 2010 &amp; 15 &amp; 6 &amp; 93 &amp; 22.6 \\ 2011 &amp; 24 &amp; 6 &amp; 100 &amp; 30 \\ 2012 &amp; 33 &amp; 6 &amp; 101 &amp; 38.6 \\ 2013 &amp; 25 &amp; 4 &amp; 102 &amp; 28.4 \\ 2014 &amp; 30 &amp; 11 &amp; 119 &amp; 34.4 \\ 2015 &amp; 33 &amp; 12 &amp; 127 &amp; 35.4 \\ 2016 &amp; 15 &amp; 7 &amp; 102 &amp; 21.6 \\ 2017 &amp; 34 &amp; 12 &amp; 150 &amp; 30.7 \\ 2018 &amp; 42 &amp; 17 &amp; 151 &amp; 39.1 \\ \bottomrule \end&#123;tabular&#125; \footnotesize&#123;*注：表中Total一栏指NDA+BLA的数量。&#125; \label&#123;tab:table1&#125;\end&#123;table&#125; 下面是这个例子的输出效果： 在脚注比较多的时候，就可以使用来自tablefootnote宏包的\tablefootnote{·}命令来生成显示在表格下面的脚注。 并置多张图片并置多张图片是我在写植物组织培养的实验报告的时候才第一次遇到的需求。不论是在论文、简历、PPT还是实验报告中，你都会常常遇到这种需求。在Microsoft Word里这个问题似乎看起来非常容易解决，但是在LaTeX里，解决方法就没有那么显然了。（当然，在你走头无路的时候总是能用Adobe Photoshop解决一切！大家想学PS的话，推荐大家关注公众号“HF的树洞”！） 在LaTeX中实现多张图片并置其实也不难。我们只需要用subfigure宏包提供的\subfigure[name-of-subfigure]{include-figure-file}命令即可。 大家可能要问了，如果有很多张图片不仅仅需要放一行该怎么办？LaTeX是非常奇妙的，我们只需要想输入文本时一样，打两个换行符或者用\\就可以了。下面是实战例子： 1234567891011121314151617181920212223242526272829\begin&#123;figure&#125; \centering \subfigure[Week 1-$t_0$]&#123;\includegraphics[width=0.22\linewidth]&#123;week1t0&#125;&#125; \subfigure[Week 1-$t_1$]&#123;\includegraphics[width=0.22\linewidth]&#123;week1t1&#125;&#125; \subfigure[Week 1-$t_2$]&#123;\includegraphics[width=0.22\linewidth]&#123;week1t2&#125;&#125; \subfigure[Week 1-$t_3$]&#123;\includegraphics[width=0.22\linewidth]&#123;week1t3&#125;&#125; \\ \subfigure[Week 2-$t_0$]&#123;\includegraphics[width=0.22\linewidth]&#123;week2t0&#125;&#125; \subfigure[Week 2-$t_1$]&#123;\includegraphics[width=0.22\linewidth]&#123;week2t1&#125;&#125; \subfigure[Week 2-$t_2$]&#123;\includegraphics[width=0.22\linewidth]&#123;week2t2&#125;&#125; \subfigure[Week 2-$t_3$]&#123;\includegraphics[width=0.22\linewidth]&#123;week2t3&#125;&#125; \\ \subfigure[Week 3-$t_0$]&#123;\includegraphics[width=0.22\linewidth]&#123;week3t0&#125;&#125; \subfigure[Week 3-$t_1$]&#123;\includegraphics[width=0.22\linewidth]&#123;week3t1&#125;&#125; \subfigure[Week 3-$t_2$]&#123;\includegraphics[width=0.22\linewidth]&#123;week3t2&#125;&#125; \subfigure[Week 3-$t_3$]&#123;\includegraphics[width=0.22\linewidth]&#123;week3t3&#125;&#125; \\ \subfigure[Week 4-$t_0$]&#123;\includegraphics[width=0.22\linewidth]&#123;week4t0&#125;&#125; \subfigure[Week 4-$t_1$]&#123;\includegraphics[width=0.22\linewidth]&#123;week4t1&#125;&#125; \subfigure[Week 4-$t_2$]&#123;\includegraphics[width=0.22\linewidth]&#123;week4t2&#125;&#125; \subfigure[Week 4-$t_3$]&#123;\includegraphics[width=0.22\linewidth]&#123;week4t3&#125;&#125; \\ \subfigure[Week 5-$t_0$]&#123;\includegraphics[width=0.22\linewidth]&#123;week5t0&#125;&#125; \subfigure[Week 5-$t_1$]&#123;\includegraphics[width=0.22\linewidth]&#123;week5t1&#125;&#125; \subfigure[Week 5-$t_2$]&#123;\includegraphics[width=0.22\linewidth]&#123;week5t2&#125;&#125; \subfigure[Week 5-$t_3$]&#123;\includegraphics[width=0.22\linewidth]&#123;week5t3&#125;&#125; \caption&#123;植物生长调节剂诱导烟草叶片器官分化结果&#125; \label&#123;fig:1&#125; \end&#123;figure&#125; 下面是这个例子的输出效果： “固定”你的图片和表格如果有试过排版有多张图片或者表格的小伙伴一定有过这样的疑惑：图片和表格怎么老是乱跑呢？到底怎么做才能固定住我的表格在我想要的位置呢？ 其实，LaTeX原生支持对于浮动体位置的某种程度上的设置。在\begin{figure}后面我们可以加上类似[htbp]或者[tp]这样的参数。其中每一个字母都代表不同的位置：h代表“这里”；t代表页面最上端；b代表页面最底端；p代表下一页。 当你问出“我的图片怎么老是乱跑？”这个问题时，大部分情况下你是希望图片老老实实呆在你安插的文字中间。这个时候，我们可以结合float宏包提供的[H]（注意这里是大写的）选项来禁用浮动。下面是一个例子： 12345678910The routine way to name compounds with heteroatoms can be identically to the naming of spiro compounds, like what is shown in Figure \ref&#123;fig:7-azaspiro4&#125;. In addition, unsaturation is also indicated in the traditional way. \begin&#123;figure&#125;[H] \centering \includegraphics[width=0.5\linewidth]&#123;7-azaspiro45dec-2-ene&#125; \caption&#123;The conventional way to name heteroatoms and unsaturation is still available.&#125; \label&#123;fig:7-azaspiro4&#125;\end&#123;figure&#125; If a choice of nomenclature or numbering occurs because of heteroatoms, functional groups or substituents the following criteria are considered in order until a decision is made. 下面是这个例子的输出效果：]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX绘制化学结构式]]></title>
    <url>%2F2019%2F07%2F07%2Flatexchemfig%2F</url>
    <content type="text"><![CDATA[本文的主要内容有： 如何直接输入结构式 好用的辅助在线工具 如何将用其他工具绘制的结构式完美地导入LaTeX 前面的四篇推送已经介绍了LaTeX的基本使用方法，相信大家已经能够排版出内容较为简单的文档了。在论文中我们常常会需要插入一个化合物的结构，而仅仅插入从网上找来或者自己绘制的.jpg和.png格式的图片往往会让LaTeX输出的.pdf文档的大小急剧增大，同时也并不是非常好看。这篇推送将简要介绍在LaTeX中最为基础的绘制结构式的方法。 直接绘制结构式在LaTeX中，我们可以通过一个名叫chemfig的宏包来直接在正文中绘制矢量格式的结构式。这种结构式不仅美观好看，而且不会让文件内容增大很多，是排版论文时的最佳选择。chemfig宏包极其强大，能够绘制复杂的反应路线图和机理，但是高级功能的语法较为复杂，本篇推送仅仅介绍其最为基础的使用方法：绘制单个分子的结构式。 在使用chemfig宏包的时候，需要先在导言区加载它。具体而言，需要输入这样的命令： 1\usepackage&#123;chemfig&#125; 用chemfig宏包绘制结构的基础命令是\chemfig{&lt;atom-1&gt; &lt;bond type&gt; [&lt;bond angle&gt;, &lt;bond length coefficient&gt;, &lt;name-1&gt;, &lt;name-2&gt;, &lt;tikz code&gt;]&lt;atom-2&gt;}，花括号内部的信息是结构式的信息。其中&lt;atom-1&gt;和&lt;atom-2&gt;是需要相连的官能团；&lt;bond type&gt;是键的类型；中括号里的&lt;bond angle&gt;用于调整键角，&lt;bond length coefficient&gt;是用于调整键的长度的系数，而&lt;name-1&gt;和&lt;name-2&gt;是连线的两点的名称；&lt;tikz code&gt;则是用tikz宏包的命令调整键的颜色和形状的代码。 下面将简要介绍如何将我们想要绘制的结构式转化成chemfig能理解的信息。 输入官能团在chemfig宏包中，输入原子团的方法是非常简单的，我们只需要按照书写原子团的方法，将数字放在_后面，将电荷放在^后面，chemfig就能够理解我们输入的信息（但数字和电荷都需要被花括号包裹，不然会报错！）。需要注意的是，如果我们想要输入一个比较长的容易引起歧义的原子团，可以用圆括号括起来。每个原子会自动和下一个大写字母或者以一下特殊符号开头的内容连起来：-, =, ~, (, !, *, &lt;, &gt;, @。 键化学中非常重要的一个概念就是键了。我们可以用形同\chemfig{A-B}的命令来将A和B这两个原子团用一根单键相联起来。而键也有许多参数，如键型、键长、键角等。接下来将简要介绍一下如何在chemfig中自定义一根你想要的键。 键型在chemfig中，有非常多种类的键。下面是一个例子： 12345678910单键是\chemfig&#123;A-B&#125;；双键是\chemfig&#123;A=B&#125;；叁键是\chemfig&#123;A~B&#125;。\\如果想画楔形键，可以用下面的几组命令：\chemfig&#123;A&gt;B&#125;和\chemfig&#123;A&lt;B&#125;，分别代表向左和向右的实心楔形键；\chemfig&#123;A&gt;:B&#125;和\chemfig&#123;A&lt;:B&#125;，分别代表向左和向右的虚线楔形键；\chemfig&#123;A&gt;|B&#125;和\chemfig&#123;A&lt;|B&#125;，分别代表向左和向右的空心楔形键。 下面是上面的例子的输出结果。 键角通过在原子团前面输入一个被方括号包裹的数字，我们可以人为地制定键的角度。有一些角度已经是实现设定好的了，比如[0]代表零度，[1]代表45度等。 下面是一个例子： 1\chemfig&#123;A-B-[1]C-[3]-D-[7]E-[6]F&#125; 下面是上面的例子的输出结果。 我们也可以改变这些预设好的角度，比如将[1]设定为30度。下面是一个例子 12\setchemfig&#123;angle increment=30&#125;\chemfig&#123;-[1]-[-1]-[1]-[-1]&#125; 下面是上面的例子的输出结果。 当然，我们也可以输入绝对的角度，这时候我们需要在方括号的第一个参数前面加上一个冒号。下面是一个例子： 1\chemfig&#123;A-[:30]B=[:-75]C-[:10]D-[:90]&gt;|[:60]-[:-20]E-[:0]~[:-75]F&#125; 下面是上面的例子的输出结果。 有时候，考虑绝对的角度是非常繁琐的，chemfig宏包提供了设定相对于上一根键的相对角度的方法。我们只需要在方括号中第一个参数的前面加上两个冒号，就能够设定相对的角度，像下面那个例子展示的一样： 1\chemfig&#123;A-[:-5]-[::20]-[::20]B-[7]-[::20]C-[::20]&#125; 下面是上面的例子的输出结果。 键长我们可以在前面提到的原子团前面的方括号中加入第二个参数，这就设定了括号前面的键的长度。下面是一个例子： 1\chemfig&#123;-=[,1.5]-[,0.75]=[:-20,2]&#125; 下面是上面的例子的输出结果。 默认情况下，chemfig使用的键长是相对键长而非固定键长。固定键长和相对键长的关系如下图所示： 由于某些原子团太过庞大导致显示效果不佳时，我们可以尝试使用固定键长的方法来调整输出的效果。下面是一个例子： 1\setchemfig&#123;fixed length=true&#125;\chemfig&#123;Cl-Cl&#125; 下面是上面的例子的输出结果。 当然也可以直接调整整个分子的大小来改变输出的效果，下面是另外一个例子： 1234567\normalsize \chemfig&#123;H-[:30]O-[:-30]H&#125;\par\setchemfig&#123;atom sep=2.5em&#125;\chemfig&#123;H-[:30]O-[:-30]H&#125;\par\small \chemfig&#123;H-[:30]O-[:-30]H&#125;\par\footnotesize \chemfig&#123;H-[:30]O-[:-30]H&#125;\par\scriptsize \chemfig&#123;H-[:30]O-[:-30]H&#125;\par\tiny \chemfig&#123;H-[:30]O-[:-30]H&#125; 下面是上面的例子的输出结果。 在线工具chemfig的语法非常复杂，尤其是在涉及到较大的分子的时候，非常难以用人工的方法来绘制出一个分子。还好，现在有一个非常方便的在线工具，可以让大家方便地绘制出自己想要的分子的结构式。 这个工具就是Mol2chemfig Web，它使得我们能够简单地得到我们想要的结构的chemfig命令。这是这个网页的界面。 我们可以看到，左边是一个非常好用的绘制结构式的工具。当然，我们也可以点击上方功能栏最左侧的按钮，加载我们已经绘制好的结构的信息文件。该网站支持的格式有.cml和.mol等非常常用的格式。画完后点击下面的GET MOL，就可以在中间那一栏得到化合物的mol信息，随后点击中下方的CONVERT按钮，就可以得到我们需要的chemfig命令了。 我们也可以在中间的那一栏搜索我们想要的化合物，然后直接得到mol信息。 右面的一栏允许我们自定义我们生成的结构式的细节，大家在使用的时候可以根据自己的需求进行勾选。 其他工具绘制结构式插入LaTeX的方法我们在这里以ChemDraw为例。如果是单个化合物，我们可以选择将文件另存为.cml或者.mol文件，随后用刚刚提到的在线工具进行转换。 如果我们绘制了非常复杂的多步反应或者绘制了机理，不方便另存为.cml文件，我们可以直接将文件另存为.eps文件，并用插入图片的方法将我们绘制的反应路线插入LaTeX。 顺便一提，TeXstudio（在Windows下）支持直接单击图片文件并复制后，点击.tex文件内合适的位置直接黏贴以插入图片，完全不需要输入代码。]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX文档组织结构]]></title>
    <url>%2F2019%2F07%2F01%2Flatex%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[本文的主要内容有： LaTeX的基本文章结构 生成目录的方法 交叉引用的方法 插入列表、表格、图片的方法 组织结构LaTeX提供了许多让文章更加有序的方法，比如支持标记文章的章节、自动生成目录等。接下来将逐一介绍这些方法。 章、节和段落在我们比较常用的article类里，LaTeX支持通过以下的命令来标记文章的组织结构：\section{·}、\subsection{·}、\subsubsection{·}、\paragraph{·}、\subparagraph{·}。他们的相对大小从左到右依次减小。 在不太多用的book中，还有\chapter{·}和\part{·}。 下面是一个例子。 12345\section&#123;一级标题&#125; \subsection&#123;二级标题&#125; \subsubsection&#123;三级标题&#125; \paragraph&#123;段落标题&#125;段落内容 \subparagraph&#123;子段落标题&#125;子段落内容 目录在文中引入了章、节的标记后，我们就可以通过在正文区中使用\tableofcontents来让LaTeX自动生成文章的目录。 下面是一个例子。 123456789101112131415161718\documentclass&#123;ctexart&#125; \title&#123;从零开始的LaTeX教程（四）：组织结构&#125; \author&#123;墘青&#125; \date&#123;\today&#125;\begin&#123;document&#125; \maketitle \tableofcontents \section&#123;学化学的理由&#125; 化学是中心学科。 \subsection&#123;学化学哪家强&#125; 来五道口找清华化学系。 \subsubsection&#123;清华化学系有多强&#125; \paragraph&#123;US News排名&#125; 全球第十，远超隔壁。 \subparagraph&#123;清华化学系的其他优势&#125; 师资雄厚。\end&#123;document&#125; 这是上面例子的输出结果： 交叉引用在编写文章的时候总是会遇到类似“如下图所示”的表达需要。在LaTeX中你可以更加简单并且精确地做到这一点。我们可以用\label{marker}，\ref{marker}和\pageref{marker}来对于我们的图表、公式、段落来进行交叉引用。其中被花括号包裹的marker是我们自己为某个对象选择的代号，在交叉引用的时候请务必确保输入了正确的代号。 环境和浮动体环境是LaTeX为了达到特殊的排版目的而设计的一个内容载体。我们在LaTeX中使用这样的语句来达到自己的目的： 123\begin&#123;environment&#125; 相应的内容，形式多种多样。 \end&#123;environment&#125; 列表我们有三种列表环境，分别是生成无序号列表的itemize，生成有序号列表的enumerate和能添加描述的description环境。这些列表是可以嵌套的（虽然有时候效果不好），就像下面这个例子所展示的一样。 123456789101112\begin&#123;enumerate&#125; \item 第一层是有序号的列表。 \begin&#123;itemize&#125; \item 第二层是无序号列表， \item[记住] 用方括号括起来的内容可以是“小标题” \end&#123;itemize&#125; \item 你必须记住： \begin&#123;description&#125; \item[列表不会] 让所有事情都看起来很漂亮有序 \item[但是它能够] 让一些东西以非常美丽的方式展现出来 \end&#123;description&#125;\end&#123;enumerate&#125; 这是上面例子的输出结果： 对齐LaTeX中有三种基础的用于对齐的环境，分别是flushleft、flushright和center，它们使用起来和Microsoft Word中的对齐没有太大差别，较为简单直观。下面是一个例子。 1234567891011121314\begin&#123;flushleft&#125; 这行字是向左对齐的。你可以手动换行，像这样\\ 或者输入两个换行符。像下面那样。\end&#123;flushleft&#125;\begin&#123;flushright&#125; 这行字是向右对齐的。 \LaTeX\ 会自动调整字符的位置，文字太长会在合适的地方换行。\end&#123;flushright&#125;\begin&#123;center&#125; 吾校庄严，巍然中央。\end&#123;center&#125; 这是上面例子的输出结果： 引用在LaTeX中，有几个被事先设定好的环境简化作者引用内容时的排版工作量。在引用较短的句子的时候，我们可以使用quote环境；引用较长的多个段落的时候，我们可以用quotation环境，这个环境会对段落进行缩进；引用诗歌的时候，我们可以用verse环境。下面这个是一个例子。 12345678910111213141516171819总工程师曾说：\begin&#123;quote&#125; 不管黑猫白猫，能捉老鼠的就是好猫。\end&#123;quote&#125;在《在武昌、深圳、珠海、上海等地的谈话要点》中，他指出：\begin&#123;quotation&#125;抓住时机，发展自己，关键是发展经济。现在，周边一些国家和地区经济发展比我们快，如果我们不发展或发展得太慢，老百姓一比较就有问题了。所以，能发展就不要阻挡，有条件的地方要尽可能搞快点，只要是讲效益，讲质量，搞外向型经济，就没有什么可以担心的。低速度就等于停步，甚至等于后退。要抓住机会，现在就是好机会。我就担心丧失机会。不抓呀，看到的机会就丢掉了，时间一晃就过去了。我国的经济发展，总要力争隔几年上一个台阶。当然，不是鼓励不切实际的高速度，还是要扎扎实实，讲求效益，稳步协调地发展。比如广东，要上几个台阶，力争用二十年的时间赶上亚洲“四小龙”。比如江苏等发展比较好的地区，就应该比全国平均速度快。又比如上海，目前完全有条件搞得更快一点。上海在人才、技术和管理方面都有明显的优势，辐射面宽。回过头看，我的一个大失误就是搞四个经济特区时没有加上上海。要不然，现在长江三角洲，整个长江流域，乃至全国改革开放的局面，都会不一样。\end&#123;quotation&#125;文章写得极为接地气，令人想吟诗一首：\begin&#123;flushleft&#125;\begin&#123;verse&#125;力微任重久神疲，再竭衰庸定不支。\\苟利国家生死以，岂因祸福避趋之？\\谪居正是君恩厚，养拙刚于戍卒宜。\\戏与山妻谈故事，试吟断送老头皮。\end&#123;verse&#125;\end&#123;flushleft&#125; 这是上面例子的输出结果： 逐字输出有些时候（比如编程教程），我们需要将一些字符原封不动地输出，让LaTeX无视其中的所有命令。这个时候verbatim环境就非常有用了。在\begin{verbatim}和\end{verbatim}之间的文本将直接输出，包括所有的换行符和空格，就像在打字机上键入一样，不会执行任何LaTeX命令。当然，如果只是需要在一个段落中使用这个环境，也有相应的简化版命令\verb+·+来完成，下面是一个例子。 123456在段落中，该功能可由\verb|\verb+text+|完成。+仅是分隔符的一个例子。除了\*或空格，可以使用任意一个字符。\begin&#123;verbatim&#125; \begin&#123;document&#125; \Hello, verbatim! \end&#123;document&#125;\end&#123;verbatim&#125; 这是上面例子的输出结果： 浮动体在一篇文章中，插图和表格通常需要占据大块空间，同时也不可被分割；所以在文字处理软件中我们经常需要调整他们的位置。figure 和 table 环境可以自动完成这样的任务；这种自动调整位置的环境称作浮动体(float)。 表格在LaTeX中，tabular环境能够用来绘制最基础的表格。我们可以用这样的命令来进入tabular环境：\begin{tabular}{table spec}。其中第二个花括号里面的table spec定义了表格的样式。 在这个环境中：\hline命令表示横线，|表示竖线；用&amp;来分列，用\\来换行；每列可以分别采用居左、居中、居右等横向对齐方式，分别在{table spec}里面用l、c、r来表示。 下面是一个例子： 123456789\begin&#123;tabular&#125;&#123;|l|c|r|&#125;\hline操作系统 &amp; 发行版&amp; 编辑器\\\hlineWindows &amp; TeX Live &amp; Texstudio \\Unix/Linux &amp; teTeX &amp; Kile \\Mac OS &amp; MacTeX &amp; TeXShop \\\hline\end&#123;tabular&#125; 这是上面例子的输出结果： 而进阶的table环境则支持增加标题、标签，并且是一个浮动体，在排版上更加智能。 图片在LaTeX中插入图片建议使用graphicx宏包。插入图片的基础命令是：\includegraphics[key=value, ...]{filename}。在插入图片时，有几种可选参数可以调节，分别是： width：把图形缩放到指定的宽度 height：把图形缩放到指定的高度 angle：逆时针旋转图形 scale：缩放图形 下面是一个例子： 123456\begin&#123;figure&#125; \centering \includegraphics[angle=45, width=0.7\textwidth]&#123;sign.eps&#125; \caption&#123;Signature&#125; \label&#123;fig:sign&#125;\end&#123;figure&#125; 这是上面例子的输出结果： 重磅预告下一期教大家如何快速简便地在LaTeX里画结构式和反应式，请大家敬请期待！！！]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX中输入数学公式]]></title>
    <url>%2F2019%2F06%2F29%2Flatexmath%2F</url>
    <content type="text"><![CDATA[本文的主要内容有： 如何输入行内公式 如何输入行间公式、多行公式 常用的数学符号输入方法 相信观察力敏锐的同学一定已经注意到在上一次的推送里的这段代码： 12345678\documentclass[a4paper,12pt,landscape,twocolumn]&#123;book&#125;\usepackage&#123;amsmath&#125;\begin&#123;document&#125; $\frac&#123;x&#125;&#123;y&#125;$ \[ \iiint\limits_&#123;\Omega_&#123;r&#125;&#125; f(x,y,z) dxdydz \]\end&#123;document&#125; 这段代码里面有着意义不明的$和\[、\]符号。如果你尝试过将这些符号删除的话，TeXstudio会报错，并告诉你这些内容“不在数学环境里”。那么，什么是数学环境呢？ 数学环境概述LaTeX有一种数学环境废话，在这种环境之下，输入的字母会被当做数学符号，用专用的数学字体（通常来说就是斜体，不过确实并不全是）显示出来。上面所说的，用$、\[和\]包裹起来的就会被LaTeX当成数学环境。在这种环境之内，LaTeX支持输入根号、幂、求和号、连乘号、积分号等多种多样的数学符号。 首先，为了取得输入数学公式时的最佳体验，建议大家在导言区加载amsmath宏包。正如上一篇推送所说，只要在导言区输入\usepackage{amsmath}就可以了。 行内公式LaTeX进入行内公式最为简单的方式是输入用一个$包裹的表达式。其实，用\(和\)包裹也会有一样的效果。但其实它们两个都是一种“环境”的简便表达。这个环境就是math。总的而言，下面这三个表达方式是等价的。 12345$\sin&#123;x&#125;$\( \cos&#123;y&#125; \)\begin&#123;math&#125;\tan&#123;z&#125;\end&#123;math&#125; 这是上面的代码的输出效果（这只是代码片段，不是完整.tex文档的内容，代入自己的文档时记得使用amsmath宏包）。 行间公式行间公式往往用来展示比较长，或者对于文章而言比较重要的公式。 单行公式最为基础的行间公式的输出方式有三种，分别是用$$、\[和\]以及displaymath环境。 这是一个例子： 123456789$$\lim\limits_&#123;r\rightarrow&#123;0^&#123;+&#125;&#125;&#125;&#123;\frac&#123;1&#125;&#123;r^&#123;3&#125;&#125; \iiint\limits_&#123;\Omega_&#123;r&#125;&#125; f(x,y,z) dxdydz = \frac&#123;4&#125;&#123;3&#125; \pi f(P)&#125;$$\[ \forall \epsilon &gt; 0, \exists \delta &gt; 0, \forall Q \in \Omega_&#123;\delta&#125;, \vert&#123;f(Q)-f(P)&#125;\vert&lt;\epsilon\]\begin&#123;displaymath&#125; \frac&#123;4&#125;&#123;3&#125;\pi \delta^&#123;3&#125; (f(P)-\epsilon) &lt; \iiint\limits_&#123;\Omega_&#123;\delta&#125;&#125; f(x,y,z)dxdydz &lt; \frac&#123;4&#125;&#123;3&#125;\pi \delta^&#123;3&#125;(f(P)+\epsilon)\end&#123;displaymath&#125; 这是上面的例子的输出效果。 其中，第一种方式不推荐使用。这是plain TeX时代就存在的命令，使用的是固定行距，不利于文章的后期调整。一般而言使用较多的是第二种方法，即用\[和\]来进入行间的数学模式。 当然，除了这种最为基础的行间公式，也存在较为高级的环境。 我们可以使用amsmath提供的equation环境来达到为自己的公式编号的目的。这样在交叉引用以及后期编辑的时候都有更大的优势。 多行公式有些时候我们需要输入的公式特别长，导致我们不得不手动为他们换行；或者某几个公式是一组，我们需要将他们放在一起；还有些时候我们需要输入分段函数，给公式加上一个在左边的大括号。这些需求都可以通过amsmath宏包提供的丰富环境达成。（后文中的大量环境都需要amsmath宏包，大家自己尝试时一定不要忘记使用！） 对于那些特别长的但是不需要对齐的公式，我们可以使用multiline环境，同时需要注意，这个环境也是默认有编号的。而对于那些需要对齐的公式，我们就需要使用aligned次环境来达到目的。使用alinged次环境的时候需要先进入化学环境；另外，在aligned环境中有着一个特殊的符号&amp;，这个符号是用于对齐的，LaTeX会自动地以&amp;为标准对齐两边的内容。在multiline和aligned这两个环境中，符号\\是用来换行的。以下是一个例子。 123456789\begin&#123;multline&#125;x = a+b+c+&#123;&#125; \\d+e+f\end&#123;multline&#125;\[\begin&#123;aligned&#125;x =&#123;&#125;&amp; a+b+c+&#123;&#125; \\&amp;d+e+f\end&#123;aligned&#125;\] 这是上面的例子的输出效果。 有些时候我们需要将几个公式组成一组。这个时候我们可以使用两种环境，分别是gather和align。其中，gather环境是不对齐的，而align环境是对齐的。在默认条件下它们都带有编号。如果不需要编号可在一行的最后加入\notag命令，也可以使用tag{·}来自定义改行的公式的编号。下面是一个例子。 123456789\begin&#123;gather&#125; U = Q + W \tag&#123;1.1&#125; \\ pV = nRT\end&#123;gather&#125;\begin&#123;align&#125; U &amp;= Q + W \notag \\ (p + \frac&#123;a&#125;&#123;&#123;V_m&#125;^2&#125;)(V_m + b) &amp;= RT\end&#123;align&#125; 这是上面那个例子的输出效果。 如果大家需要输入一个分段的函数，则需要使用一个叫做cases的次环境，使用它时也要先进入数学环境。下面是一个例子。 123456\[ f(x)= \begin&#123;cases&#125; -x + 1 , \quad x \leq 1 \\ x - 1 , \quad x &gt; 1\end&#123;cases&#125; \] 这是上面这个例子的输出效果。 以上就是一些比较常用的基础的数学环境，可以用于输入一些不太复杂的行内公式和行间公式。接下来我们来简要地介绍以下大家常用的数学符号的输入方法。 数学符号的输入首先，为了取得输入数学公式时的最佳体验，建议大家在导言区加载amsmath宏包。正如上一篇推送所说，只要在导言区输入\usepackage{amsmath}就可以了。 分数输入分数的基础命令是\frac{·}{·}，其中前面的花括号内是分子，后面的花括号内是分母。在行间公式和行内公式中，\frac命令的输出效果是有不同的。如果想要客制化输出效果，可以用\dfrac命令强制输出行间公式下的分式样式；反之，可以用\tfrac命令强制输出行内公式的分式样式。下面是一个例子。 12345678$n=\frac&#123;p&#125;&#123;kT&#125;$\[ \lambda = \frac&#123;kT&#125;&#123;\sqrt&#123;2&#125; \pi d^2 p&#125;\]$n=\dfrac&#123;p&#125;&#123;kT&#125;$\[ \lambda = \tfrac&#123;kT&#125;&#123;\sqrt&#123;2&#125; \pi d^2 p&#125;\] 这是上面这个例子的输出效果。 根号和上下标上标是通过符号^来生成的；下标是用符号_生成的。需要注意的是LaTeX只会默认将上下标符号后的第一个字符当作是上下标的内容，需要在上下标内输入很多内容的时候要记得用花括号将内容包裹起来。 根号是用\sqrt{·}来生成的，需要输入n次根式的时候，需要再输入一个用中括号包裹的参数，像这样\sqrt[n]{·}。方根符号的大小是由LaTeX自动调整的，也可以用\surd命令仅仅给出符号。 下面是一个比较综合的例子。 123\[ \sqrt[n]&#123;&#123;a_&#123;ij&#125;&#125;^&#123;e\surd&#123;2&#125;&#125;&#125; \] 这是上面这个例子的输出效果。 最常用的运算符比较常用的运算符有极限\lim；求和\sum_{·}^{·}；连乘\prod_{·}^{·}；以及各类积分\int_{·}^{·}、\iint、\iiint。它们的上下标在行间公式内默认是写在右侧以适应行高的，我们可以用\limits来强制不压缩上下标；反之可以用\nolimits来压缩上下标。下面是一个例子。 12345$\lim_&#123;x \to 0&#125; &#123;\sin x&#125; = 0$\[ \sum\nolimits_&#123;i=1&#125;^n i \quad \prod_&#123;i=1&#125;^n\]$\lim\limits_&#123;r \to &#123;0^&#123;+&#125;&#125;&#125;&#123;\frac&#123;1&#125;&#123;r^&#123;3&#125;&#125; \iiint_&#123;\Omega_&#123;r&#125;&#125; f(x,y,z) dxdydz = \frac&#123;4&#125;&#123;3&#125; \pi f(P)&#125;$ 这是上面这个例子的输出效果。 在表达式上下方画线和括号我们可以用命令\overline和\underline在表达式的上、下方画出水平线；可以用\vec命令来画向量；可以用\overbrace{·}^{·}和\underbrace{·}_{·}在表达式的上、下方给出一水平的大括号。下面是一个例子。 123\[ \overline&#123;\alpha + \beta&#125;=\underbrace&#123;\vec&#123;a&#125;+b+...+z&#125;_&#123;26&#125;\] 这是上面这个例子的输出效果。 数学符号以下的表格是一份比较完整的关于数学模式中常用的数学符号的总结。 重音符小写的希腊字母大写的希腊字母二元关系符号二元运算符大运算符箭头定界符其他数学符号非数学符号AMS符号以下的符号使用需要事先安装AMS数学字库，同时在导言区加载宏包amssymb。 定界符希伯来字母二元关系符箭头二元否定关系符和箭头二元运算符其他符号数学字体说明下期预告下一篇推送是关于文档组织结构和各类常用环境的，请大家敬请期待！]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX基本文本输入]]></title>
    <url>%2F2019%2F06%2F27%2Flatextext%2F</url>
    <content type="text"><![CDATA[这篇文章的主要内容有： 导言区、正文区的含义 控制序列的特点 文档类型 基础文本输入方法 LaTeX文档概述安装好所有需要的软件之后，我们就可以开始编辑自己的文档啦！ 大家可以先回忆一下上一次最后我们在.tex文档里面输入的代码。 1234\documentclass&#123;article&#125;\begin&#123;document&#125; Hello, \LaTeX\ !\end&#123;document&#125; 接下来我将向大家解释一下这些代码的含义。 导言区与正文区.tex文档可以分成两个部分，分别是导言区和正文区。 从\documentclass{article}到\begin{document}中间的所有部分被称为.tex文档的导言区。在导言区里，我们需要“声明”一些和文档整体有关的参数，例如：文档类型、需要使用的宏包、为宏包设定参数、设定目录样式、页面大小、页眉页脚、章节标题样式等等。 LaTeX的文档类型多种多样，符合不同人群的需要。常见的文档类型有article，book，ctexart（一种原生支持中文、对中文排版做了特殊优化的文档类型）。当然，也有许多期刊杂志所要求的特殊排版方式，如：apa6，achemso，amsart等。这些文档类型预置了对于页边距、字体、页眉页脚、目录、章节标题、图表标题格式、引用与脚注样式的设定，找到对的文档类型将会大大节省我们用于排版的时间。 而从\begin{document}到\end{document}的所有部分是.tex文档的正文区。在这里，我们输入自己创作的内容，并提交给TeX引擎排版。 最后，在\end{document}之后的所有内容都会被TeX忽略。 导言区可以输入什么导言区可以输入文章的作者、文章的标题、写作日期等基础信息。在文档的正文部分，需要使用\maketitle命令来输出这些信息。具体而言就像下面这样。 1234567\documentclass&#123;ctexart&#125;\title&#123;Hello, \LaTeX\ !&#125;\author&#123;Qian-Qing&#125;\date&#123;\today&#125;\begin&#123;document&#125;\maketitle\end&#123;document&#125; 也可以输入大家需要使用的宏包。宏包是一系列控制序列的集合。这些控制序列非常常用、或者需要时实现比较繁琐，所以开发者们将它们打包放在同一个文件中，成为所谓的宏包（package）。\usepackage{}可以用来调用宏包。 大家会比较常用的宏包有：ctex用于中文输入；amsmath，用于一些数学输入；graphicx用于插入图片；tikz用于直接绘制矢量图象；float用于处理浮动体；chemfig用于绘制化学结构式；natbib用于定制引用格式等。实用的宏包还有很多，大家在自己的学习过程中可以慢慢琢磨使用各类宏包的技巧。当然，之后我也会分享一些这方面的小技巧。 控制序列LaTeX中的所有控制序列（或者称作命令）都是以反斜杠符号\开头的，并以之后第一个空格或者非英文字符结束的一串字符。它们不一定会被直接输出，但是这些控制序列一般都会影响文档输出的效果。 以刚才在导言区出现过的\documentclass{article}为例子的话，\document就是一个控制序列，它告诉了TeX引擎文章需要套用哪一套“模板”；跟在后面的{article}是服务于这个控制序列的参数，是“模板”的内容。\documentclass{article}这个命令成功地调用了一个名为article的文档类型。 控制序列需要的参数很多时候不止一个，也并不是所有的参数都被{}所包裹。举一个例子。 12345678\documentclass[a4paper,12pt,landscape,twocolumn]&#123;book&#125;\usepackage&#123;amsmath&#125;\begin&#123;document&#125; $\frac&#123;x&#125;&#123;y&#125;$ \[ \iiint\limits_&#123;\Omega_&#123;r&#125;&#125; f(x,y,z) dxdydz \]\end&#123;document&#125; 在上面这个例子里，\documentclass[a4paper,12pt,landscape,twocolumn]{book}是关于文档类型的控制序列。大家可以发现，这回的控制序列参数有用花括号包裹的{book}，也有一串用中括号包裹的[a4paper,12pt,landscape,twocolumn]。其中，{book}声明了这篇文档的类型是“书籍”。而中括号里面的内容则是正对文档类型的更加详细的参数，比如a4paper规定了纸张的大小，12pt规定了正文字号的大小，twocolumn控制文档分成两栏等。 同时，在下面那个输入分号的命令中，不仅仅有一个被花括号围起来的参数。前面的{x}代表了分子，后面的{y}代表了分母。 文本输入在了解完文档的结构之后，我们就可以开始着手输入.tex文档的正文内容啦~ 再提醒一句，所有的正文请输入在\begin{document}到\end{document}之间哦！ 中英文混排目前，最为理想的中英文混排方案是通过ctex宏包实现的。在导言区中输入\usepackage{ctex}即可使用该宏包来实现简单的中英文混排。 当然，也可以直接使用文档类型ctexart来实现中英文的混排。大家不妨试试在自己的.tex文档里输入以下的代码。 12345\documentclass&#123;ctexart&#125;\begin&#123;document&#125; 你好，\LaTeX\ ！ Hello, \LaTeX\ !\end&#123;document&#125; 加粗、斜体在LaTeX之中，有许多文字处理的方式。其中既有常见的加粗、斜体，也有不那么常见的Slanted和Small Caps效果。下面这个就是一个例子。 12345678\documentclass&#123;article&#125;\begin&#123;document&#125;Text can be \emph&#123;emphasized&#125;.Besides being \textit&#123;italic&#125; words could be \textbf&#123;bold&#125;,\textsl&#123;slanted&#125; or typeset in \textsc&#123;Small Caps&#125;.Such commands can be \textit&#123;\textbf&#123;nested&#125;&#125;.\emph&#123;See how \emph&#123;emphasizing&#125; looks when nested.&#125;\end&#123;document&#125; 大家可以自己尝试将上面的这些命令运用到中文的排版之中，看看会有什么样的效果？ 更多的有关文字效果的命令如下图所示 字号LaTeX提供了许多文字大小的选项，详见下面这个例子。 123456\documentclass&#123;article&#125;\begin&#123;document&#125;\noindent\tiny We \scriptsize start \footnotesize \small small,\normalsize get \large big \Large and \LARGE bigger,\huge huge and \Huge gigantic!\end&#123;document&#125; 符号LaTeX中许多特殊符号由于和编程过程中使用的符号重合，输入的方法是非常规的，就如下面这个例子中所演示的。 123456\documentclass&#123;ctexart&#125;\begin&#123;document&#125;称述 \#1:50\% 的 \$100 是 \$50 。其他的特殊符号包括 \&amp;, \_, \&#123; and \&#125;.\end&#123;document&#125; 行距在LaTeX之中，你既可以对整篇文章的行距进行调整、也可以对于局部文本的行距进行调整。下面分别是这两种调整的例子。 全局行距设置 1\usepackage[onehalfspacing]&#123;setspace&#125; 局部行距设置 123\begin&#123;spacing&#125;&#123;2.4&#125; This text is stretched by a factor of 2.4.\end&#123;spacing&#125; 下期预告下一期是关于数学公式输入的内容，请大家敬请期待！]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LaTeX是什么？有什么用？]]></title>
    <url>%2F2019%2F06%2F26%2Flatex%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[什么是LaTeX？LaTeX是一种基于ΤΕΧ的排版系统，常被用于排版期刊文章、书籍、学位论文。LaTeX和它的前身TeX都是自由软件，因而被广泛使用，是排版高质量科技类文档的标准应用。 为什么要用LaTeX？首先需要声明的是，LaTeX在某种意义上和“编程”有一些像，但这并不说明它非常难学，相反地，LaTeX上手起来非常快，往往只需要几个小时。 和Microsoft Word这款工具相比，LaTeX最大的不同就是它不是一款“所见即所得”的工具。作者们需要首先编写一个.tex格式的文件(本质上就是一个文本文档)，随后将.tex文件交给TeX排版引擎处理，来得到最后的.dvi(现在已经少见)或是.pdf文档。这个特点使得作者们可以专心编辑内容，在最后调试输出的时候再细细考虑排版的问题；同时LaTeX也提供了大量的模板来减少作者的工作量。 关于LaTeX的一些名词解释在使用LaTeX的过程中有几个重要的概念：引擎、宏集、发行版。 引擎引擎是将文档的内容进行排版的真正主体，包含以下几种： TeX: 最为原始的排版引擎，生成的是.dvi文件，现在很少用到。 pdfTeX: 在TeX的基础上将生成的.dvi文件转化成.pdf文件，是不少发行版的默认引擎。 XeTeX(推荐): 是使用了Unicode的TeX排版引擎，对于中文的支持前所未有的好。除此以外还支持了不少现代字体技术(OpenType等)，排版效果有一定的提升。 LuaTeX: 最新的排版引擎，但是默认使用Lua，对于LaTeX的支持现在并不完善。 宏集宏集类似于编译器，可以将较为接近自然语言的内容编译成排版引擎可以“理解”的内容。以下是一些比较常见的宏集。 plain TeX: 是最古老的TeX宏集, 提供了一些基本的命令，语法和现在流行的LaTeX已经大有不同。 LaTeX: Leslie Lamport开发的宏包，更加直观简单。 AMSTeX: 美国数学会提供的一个TeX宏集，针对数学符号和公式进行了优化 发行版发行版是一个TeX引擎、宏集、文档模板的集合，是使用LaTeX不得不安装的一个组件。现在常见的发行版有： TeX Live(推荐): 是由国际TeX用户组织开发的TeX系统，是更新最快，内容最全的发行版。支持Windows, Unix, Linux。 MacTeX: 同为TUG开发的TeX系统，针对Mac OS进行开发，安装简单、功能齐全。 CTeX: 中科院吴凌云研究员基于MiKTeX开发的TeX系统，方便了中文输入。但是从2012年后已经停止开发不再更新，不推荐使用。 安装并配置LaTeX安装发行版考虑到功能与更新速度，个人推荐使用自由软件TeX Live。下面以Windows平台上TeX Live的获取和安装为例子。 TeX Live的官网上提供了许多下载方式与媒介，这使得获取安装文件异常简单，大家可以根据自己的需要获取对应的安装文件，一般来说使用官方的这个安装工具就可以了。除此以外，在清华大学开源软件镜像站上面也有TeX Live最新版的镜像。 下载完安装工具以后，只需要根据安装助手的指导一步步安装即可。需要注意以下几点： TeX Live需要的安装体积比较大，约6GB 官方工具是在线安装的，安装速度会受到网速的影响 安装文件全部下载完后，安装过程本身的索引过程时间比较长，需要约45分钟 安装完成后，我们就可以开始安装编辑器了。 安装编辑器编辑器是用来编辑.tex文件的工具。理论上，由于.tex文件本质上就是纯文本工具，因此用Windows的记事本就可以打开并编辑.tex文件了。但是这样编写文档的效率较低，因此有许多工具被开发出来提高创作者们编写.tex文档的效率。以下是一些比较常用的工具。 TeXworks: TeX Live自带的编辑器，十分轻量级，界面较为简陋，代码高亮功能较弱。 WinEdt: CTeX套装自带的编辑器，对中文支持较好，但是自动填充和代码高亮能力较弱。 TeXstudio(推荐): 非常强大的编辑器，自动填充、语法检查、代码高亮能力都非常强。 Sublime Text: 非常受欢迎的多语言工具，但是在用它码LaTeX的时候需要一些比较繁琐的配置过程 Visual Studio Code: 界面美观、自动填充能力很强的多语言编辑器。 接下来以Windows平台上TeXstudio的安装为例子。你可以在这里下载到TeXstudio的最新版本。安装过程非常简单，此不再赘述。 接下来列举两条推荐的编辑器配置方法：（以Windows平台上TeXstudio为例） 找到Options -&gt; Configure TeXstudio；在Build：Default Compiler这一项里选择 XeLaTeX 搜索框输入 Line Number -&gt; Adv. Editor -&gt; 打开行号 配置完成后，大家可以新建一个.tex文件，并输入如下的代码： 1234\documentclass&#123;article&#125;\begin&#123;document&#125; Hello, \LaTeX\ !\end&#123;document&#125; 接着单击TeXstudio界面上的“构建并查看”按钮(或者按下F5)，就能用LaTeX生成自己的第一篇文档啦！]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
</search>
